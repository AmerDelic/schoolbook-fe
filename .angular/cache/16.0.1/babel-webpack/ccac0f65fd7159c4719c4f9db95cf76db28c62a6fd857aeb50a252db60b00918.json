{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/authentication.service\";\nclass AuthInterceptor {\n  constructor(authenticationService) {\n    this.authenticationService = authenticationService;\n  }\n  intercept(request, next) {\n    if (request.url.includes(`/user/login`) || request.url.includes(`/user/register`) || request.url.includes(`/user/reset`)) {\n      return next.handle(request);\n    }\n    this.authenticationService.loadToken();\n    const token = this.authenticationService.getToken();\n    if (token) {\n      const requestClone = request.clone({\n        setHeaders: {\n          Authorization: `Bearer  ${token}`\n        }\n      });\n      return next.handle(requestClone);\n    }\n    return next.handle(request);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthenticationService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});\nexport { AuthInterceptor };","map":{"version":3,"names":["AuthInterceptor","constructor","authenticationService","intercept","request","next","url","includes","handle","loadToken","token","getToken","requestClone","clone","setHeaders","Authorization","i0","ɵɵinject","i1","AuthenticationService","factory","ɵfac"],"sources":["/home/amer/AngularProjects/schoolbook/src/app/interceptor/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from '../service/authentication.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authenticationService: AuthenticationService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if(request.url.includes(`/user/login`) || request.url.includes(`/user/register`) || request.url.includes(`/user/reset`)) {\n      return next.handle(request);\n    }\n    this.authenticationService.loadToken();\n    const token = this.authenticationService.getToken();\n    if(token) {\n     const requestClone = request.clone({setHeaders: {Authorization: `Bearer  ${token}`}});\n     return next.handle(requestClone);\n    }\n    return next.handle(request);\n  }\n}\n"],"mappings":";;AAUA,MACaA,eAAe;EAE1BC,YAAoBC,qBAA4C;IAA5C,KAAAA,qBAAqB,GAArBA,qBAAqB;EAA0B;EAEnEC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IACpD,IAAGD,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,IAAIH,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,gBAAgB,CAAC,IAAIH,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;MACvH,OAAOF,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC;;IAE7B,IAAI,CAACF,qBAAqB,CAACO,SAAS,EAAE;IACtC,MAAMC,KAAK,GAAG,IAAI,CAACR,qBAAqB,CAACS,QAAQ,EAAE;IACnD,IAAGD,KAAK,EAAE;MACT,MAAME,YAAY,GAAGR,OAAO,CAACS,KAAK,CAAC;QAACC,UAAU,EAAE;UAACC,aAAa,EAAE,WAAWL,KAAK;QAAE;MAAC,CAAC,CAAC;MACrF,OAAOL,IAAI,CAACG,MAAM,CAACI,YAAY,CAAC;;IAEjC,OAAOP,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC;EAC7B;;AAfWJ,eAAe,C;mBAAfA,eAAe,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,qBAAA;AAAA;AAAfnB,eAAe,C;SAAfA,eAAe;EAAAoB,OAAA,EAAfpB,eAAe,CAAAqB;AAAA;SAAfrB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}