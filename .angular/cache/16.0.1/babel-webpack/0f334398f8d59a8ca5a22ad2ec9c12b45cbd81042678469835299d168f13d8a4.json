{"ast":null,"code":"import { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass UserService {\n  constructor(http) {\n    this.http = http;\n    this.host = environment.apiUrl;\n  }\n  getUsers() {\n    return this.http.get(`${this.host}/user`);\n  }\n  addUser(formData) {\n    return this.http.post(`${this.host}/user/create`, formData);\n  }\n  updateUser(formData) {\n    return this.http.put(`${this.host}/user`, formData);\n  }\n  resetPassword(email) {\n    return this.http.post(`${this.host}/user/reset`, email);\n  }\n  updateProfileImage(formData) {\n    return this.http.post(`${this.host}/user/profile/image`, formData, {\n      reportProgress: true,\n      observe: 'events'\n    });\n  }\n  deleteUser(id) {\n    return this.http.delete(`${this.host}/user/${id}`);\n  }\n  addUsersToLocalStorage(users) {\n    localStorage.setItem('users', JSON.stringify(users));\n  }\n  getUsersFromLocalStorage() {\n    let users = localStorage.getItem('users');\n    if (users !== null && users !== '') {\n      return JSON.parse(users);\n    }\n    return null;\n  }\n  createUserFormData(loggedInUsername, user, profileImage) {\n    const formData = new FormData();\n    formData.append('currentUsername', loggedInUsername);\n    formData.append('username', user.username);\n    formData.append('password', loggedInUsername);\n    formData.append('firstName', loggedInUsername);\n    formData.append('lastName', loggedInUsername);\n    formData.append('email', loggedInUsername);\n    formData.append('role', loggedInUsername);\n    formData.append('profileImage', profileImage);\n    formData.append('isEnabled', profileImage);\n    formData.append('isNonLocked', profileImage);\n    return formData;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});\nexport { UserService };","map":{"version":3,"names":["environment","UserService","constructor","http","host","apiUrl","getUsers","get","addUser","formData","post","updateUser","put","resetPassword","email","updateProfileImage","reportProgress","observe","deleteUser","id","delete","addUsersToLocalStorage","users","localStorage","setItem","JSON","stringify","getUsersFromLocalStorage","getItem","parse","createUserFormData","loggedInUsername","user","profileImage","FormData","append","username","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/amer/AngularProjects/schoolbook/src/app/service/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment.development';\nimport { HttpClient, HttpErrorResponse, HttpEvent, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../model/user';\nimport { CustomHttpResponse } from '../model/response/custom-http-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private host: string = environment.apiUrl;\n\n  constructor(private http: HttpClient) {}\n\n  public getUsers(): Observable<User[] | HttpErrorResponse> {\n    return this.http.get<User[]>(`${this.host}/user`);\n  }\n\n  public addUser(formData: FormData): Observable<User | HttpErrorResponse> {\n    return this.http.post<User>(`${this.host}/user/create`, formData); \n  } \n\n  public updateUser(formData: FormData): Observable<User | HttpErrorResponse> {\n    return this.http.put<User>(`${this.host}/user`, formData);\n  }\n\n  public resetPassword(email: string): Observable<CustomHttpResponse | HttpErrorResponse> {\n    return this.http.post<CustomHttpResponse>(`${this.host}/user/reset`, email);\n  }\n   \n  public updateProfileImage(formData: FormData): Observable<HttpEvent<any> | HttpErrorResponse> {\n    return this.http.post<any>(`${this.host}/user/profile/image`, formData, {reportProgress:true, observe:'events'});\n  }\n\n  public deleteUser(id: string): Observable<CustomHttpResponse | HttpErrorResponse> {\n    return this.http.delete<CustomHttpResponse>(`${this.host}/user/${id}`);\n  }\n\n  public addUsersToLocalStorage(users: User[]): void {\n    localStorage.setItem('users', JSON.stringify(users));\n  }\n\n  public getUsersFromLocalStorage(): User[] | null {\n    let users: string | null = localStorage.getItem('users'); \n    if(users !== null && users !== '') {\n      return JSON.parse(users);\n    }\n    return null;\n  }\n\n  public createUserFormData(loggedInUsername: string, user: User, profileImage: File): FormData {\n    const formData = new FormData();\n    formData.append('currentUsername', loggedInUsername);\n    formData.append('username', user.username);\n    formData.append('password', loggedInUsername);\n    formData.append('firstName', loggedInUsername);\n    formData.append('lastName', loggedInUsername);\n    formData.append('email', loggedInUsername);\n    formData.append('role', loggedInUsername);\n    formData.append('profileImage', profileImage);\n    formData.append('isEnabled', profileImage);\n    formData.append('isNonLocked', profileImage);\n    return formData;\n  }\n\n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,0CAA0C;;;AAMtE,MAGaC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,IAAI,GAAWJ,WAAW,CAACK,MAAM;EAEF;EAEhCC,QAAQA,CAAA;IACb,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAS,GAAG,IAAI,CAACH,IAAI,OAAO,CAAC;EACnD;EAEOI,OAAOA,CAACC,QAAkB;IAC/B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAO,GAAG,IAAI,CAACN,IAAI,cAAc,EAAEK,QAAQ,CAAC;EACnE;EAEOE,UAAUA,CAACF,QAAkB;IAClC,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAO,GAAG,IAAI,CAACR,IAAI,OAAO,EAAEK,QAAQ,CAAC;EAC3D;EAEOI,aAAaA,CAACC,KAAa;IAChC,OAAO,IAAI,CAACX,IAAI,CAACO,IAAI,CAAqB,GAAG,IAAI,CAACN,IAAI,aAAa,EAAEU,KAAK,CAAC;EAC7E;EAEOC,kBAAkBA,CAACN,QAAkB;IAC1C,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAM,GAAG,IAAI,CAACN,IAAI,qBAAqB,EAAEK,QAAQ,EAAE;MAACO,cAAc,EAAC,IAAI;MAAEC,OAAO,EAAC;IAAQ,CAAC,CAAC;EAClH;EAEOC,UAAUA,CAACC,EAAU;IAC1B,OAAO,IAAI,CAAChB,IAAI,CAACiB,MAAM,CAAqB,GAAG,IAAI,CAAChB,IAAI,SAASe,EAAE,EAAE,CAAC;EACxE;EAEOE,sBAAsBA,CAACC,KAAa;IACzCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;EACtD;EAEOK,wBAAwBA,CAAA;IAC7B,IAAIL,KAAK,GAAkBC,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;IACxD,IAAGN,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,EAAE,EAAE;MACjC,OAAOG,IAAI,CAACI,KAAK,CAACP,KAAK,CAAC;;IAE1B,OAAO,IAAI;EACb;EAEOQ,kBAAkBA,CAACC,gBAAwB,EAAEC,IAAU,EAAEC,YAAkB;IAChF,MAAMxB,QAAQ,GAAG,IAAIyB,QAAQ,EAAE;IAC/BzB,QAAQ,CAAC0B,MAAM,CAAC,iBAAiB,EAAEJ,gBAAgB,CAAC;IACpDtB,QAAQ,CAAC0B,MAAM,CAAC,UAAU,EAAEH,IAAI,CAACI,QAAQ,CAAC;IAC1C3B,QAAQ,CAAC0B,MAAM,CAAC,UAAU,EAAEJ,gBAAgB,CAAC;IAC7CtB,QAAQ,CAAC0B,MAAM,CAAC,WAAW,EAAEJ,gBAAgB,CAAC;IAC9CtB,QAAQ,CAAC0B,MAAM,CAAC,UAAU,EAAEJ,gBAAgB,CAAC;IAC7CtB,QAAQ,CAAC0B,MAAM,CAAC,OAAO,EAAEJ,gBAAgB,CAAC;IAC1CtB,QAAQ,CAAC0B,MAAM,CAAC,MAAM,EAAEJ,gBAAgB,CAAC;IACzCtB,QAAQ,CAAC0B,MAAM,CAAC,cAAc,EAAEF,YAAY,CAAC;IAC7CxB,QAAQ,CAAC0B,MAAM,CAAC,WAAW,EAAEF,YAAY,CAAC;IAC1CxB,QAAQ,CAAC0B,MAAM,CAAC,aAAa,EAAEF,YAAY,CAAC;IAC5C,OAAOxB,QAAQ;EACjB;;AAtDWR,WAAW,C;mBAAXA,WAAW,EAAAoC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXvC,WAAW,C;SAAXA,WAAW;EAAAwC,OAAA,EAAXxC,WAAW,CAAAyC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEP1C,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}