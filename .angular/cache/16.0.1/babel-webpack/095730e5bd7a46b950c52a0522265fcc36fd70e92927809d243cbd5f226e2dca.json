{"ast":null,"code":"import { environment } from 'src/environments/environment.development';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthenticationService {\n  constructor(http) {\n    this.http = http;\n    this.host = environment.apiUrl;\n    this.token = null;\n    this.loggedInUsername = null;\n    this.jwtHelper = new JwtHelperService();\n  }\n  login(user) {\n    return this.http.post(`${this.host}/user/login`, user, {\n      observe: 'response'\n    }).toPromise();\n  }\n  register(user) {\n    return this.http.post(`${this.host}/user/register`, user);\n  }\n  logout() {\n    this.token = null;\n    this.loggedInUsername = null;\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.removeItem('users');\n  }\n  saveToken(token) {\n    this.token = token;\n    localStorage.setItem('token', token);\n  }\n  loadToken() {\n    this.token = localStorage.getItem('token');\n  }\n  getToken() {\n    return this.token;\n  }\n  addUserToCache(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  getUserFromCache() {\n    const userJson = localStorage.getItem('user');\n    try {\n      return JSON.parse(userJson ?? 'null');\n    } catch (error) {\n      console.error(error);\n      throw new Error('Failed to parse user data.');\n    }\n  }\n  isLoggedIn() {\n    this.loadToken();\n    if (this.token) {\n      let decodedToken = this.jwtHelper.decodeToken(this.token);\n      if (decodedToken != null) {\n        if (!this.jwtHelper.isTokenExpired(this.token)) {\n          this.loggedInUsername = decodedToken.sub;\n          return true;\n        }\n      }\n      return false;\n    }\n    this.logout();\n    return false;\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthenticationService };","map":{"version":3,"names":["environment","JwtHelperService","AuthenticationService","constructor","http","host","apiUrl","token","loggedInUsername","jwtHelper","login","user","post","observe","toPromise","register","logout","localStorage","removeItem","saveToken","setItem","loadToken","getItem","getToken","addUserToCache","JSON","stringify","getUserFromCache","userJson","parse","error","console","Error","isLoggedIn","decodedToken","decodeToken","isTokenExpired","sub","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/amer/AngularProjects/schoolbook/src/app/service/authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment.development';\nimport { HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../model/user';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  public host: string = environment.apiUrl;\n  private token: string | null = null;\n  private loggedInUsername: string | null = null;\n  private jwtHelper = new JwtHelperService();\n\n  constructor(private http: HttpClient) {}\n\n  public login(user: User): Promise<HttpResponse<any>> {\n    return this.http.post<any>(`${this.host}/user/login`, user, {observe: 'response'}).toPromise(); \n  }\n\n  public register(user: User): Observable<User> {\n    return this.http.post<User>(`${this.host}/user/register`, user);\n  } \n\n  public logout(): void {\n    this.token = null;\n    this.loggedInUsername = null;\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.removeItem('users');\n  }\n\n  public saveToken(token: string): void {\n    this.token = token;\n    localStorage.setItem('token', token);\n  }\n\n  public loadToken(): void {\n    this.token = localStorage.getItem('token');\n  }\n\n  public getToken(): string | null {\n    return this.token;\n  }\n\n  public addUserToCache(user: User): void {\n    localStorage.setItem('user', JSON.stringify(user))\n  }\n\n  public getUserFromCache(): User {\n    const userJson = localStorage.getItem('user');\n    try {\n      return JSON.parse(userJson ?? 'null');\n    } catch(error) {\n      console.error(error);\n      throw new Error('Failed to parse user data.');\n    }\n  }\n\n  public isLoggedIn(): boolean {\n    this.loadToken();\n    if(this.token) {\n      let decodedToken = this.jwtHelper.decodeToken(this.token); \n      if(decodedToken != null) {\n        if(!this.jwtHelper.isTokenExpired(this.token)) {\n          this.loggedInUsername = decodedToken.sub;\n          return true;\n        }\n      }\n      return false;\n    }\n    this.logout();\n    return false;\n  }\n\n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,0CAA0C;AAItE,SAASC,gBAAgB,QAAQ,oBAAoB;;;AAErD,MAGaC,qBAAqB;EAMhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALjB,KAAAC,IAAI,GAAWL,WAAW,CAACM,MAAM;IAChC,KAAAC,KAAK,GAAkB,IAAI;IAC3B,KAAAC,gBAAgB,GAAkB,IAAI;IACtC,KAAAC,SAAS,GAAG,IAAIR,gBAAgB,EAAE;EAEH;EAEhCS,KAAKA,CAACC,IAAU;IACrB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACP,IAAI,aAAa,EAAEM,IAAI,EAAE;MAACE,OAAO,EAAE;IAAU,CAAC,CAAC,CAACC,SAAS,EAAE;EAChG;EAEOC,QAAQA,CAACJ,IAAU;IACxB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAO,GAAG,IAAI,CAACP,IAAI,gBAAgB,EAAEM,IAAI,CAAC;EACjE;EAEOK,MAAMA,CAAA;IACX,IAAI,CAACT,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5BS,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;IAC/BD,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChCD,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAClC;EAEOC,SAASA,CAACZ,KAAa;IAC5B,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClBU,YAAY,CAACG,OAAO,CAAC,OAAO,EAAEb,KAAK,CAAC;EACtC;EAEOc,SAASA,CAAA;IACd,IAAI,CAACd,KAAK,GAAGU,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;EAC5C;EAEOC,QAAQA,CAAA;IACb,OAAO,IAAI,CAAChB,KAAK;EACnB;EAEOiB,cAAcA,CAACb,IAAU;IAC9BM,YAAY,CAACG,OAAO,CAAC,MAAM,EAAEK,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC,CAAC;EACpD;EAEOgB,gBAAgBA,CAAA;IACrB,MAAMC,QAAQ,GAAGX,YAAY,CAACK,OAAO,CAAC,MAAM,CAAC;IAC7C,IAAI;MACF,OAAOG,IAAI,CAACI,KAAK,CAACD,QAAQ,IAAI,MAAM,CAAC;KACtC,CAAC,OAAME,KAAK,EAAE;MACbC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,MAAM,IAAIE,KAAK,CAAC,4BAA4B,CAAC;;EAEjD;EAEOC,UAAUA,CAAA;IACf,IAAI,CAACZ,SAAS,EAAE;IAChB,IAAG,IAAI,CAACd,KAAK,EAAE;MACb,IAAI2B,YAAY,GAAG,IAAI,CAACzB,SAAS,CAAC0B,WAAW,CAAC,IAAI,CAAC5B,KAAK,CAAC;MACzD,IAAG2B,YAAY,IAAI,IAAI,EAAE;QACvB,IAAG,CAAC,IAAI,CAACzB,SAAS,CAAC2B,cAAc,CAAC,IAAI,CAAC7B,KAAK,CAAC,EAAE;UAC7C,IAAI,CAACC,gBAAgB,GAAG0B,YAAY,CAACG,GAAG;UACxC,OAAO,IAAI;;;MAGf,OAAO,KAAK;;IAEd,IAAI,CAACrB,MAAM,EAAE;IACb,OAAO,KAAK;EACd;;AAjEWd,qBAAqB,C;mBAArBA,qBAAqB,EAAAoC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAArBvC,qBAAqB,C;SAArBA,qBAAqB;EAAAwC,OAAA,EAArBxC,qBAAqB,CAAAyC,IAAA;EAAAC,UAAA,EAFpB;AAAM;SAEP1C,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}