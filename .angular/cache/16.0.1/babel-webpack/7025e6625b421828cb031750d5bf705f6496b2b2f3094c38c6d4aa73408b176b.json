{"ast":null,"code":"\"use strict\";\n\n// import { Injectable } from '@angular/core';\n// import {\n//   HttpRequest,\n//   HttpHandler,\n//   HttpEvent,\n//   HttpInterceptor\n// } from '@angular/common/http';\n// import { Observable } from 'rxjs';\n// import { AuthenticationService } from '../service/authentication.service';\n// @Injectable()\n// export class AuthInterceptor implements HttpInterceptor {\n//   constructor(private authenticationService: AuthenticationService) {}\n//   intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n//     if(request.url.includes(`/user/login`) || request.url.includes(`/user/register`) || request.url.includes(`/user/reset`)) {\n//       return next.handle(request);\n//     }\n//     this.authenticationService.loadToken();\n//     const token = this.authenticationService.getToken();\n//     if(token) {\n//      const requestClone = request.clone({setHeaders: {Authorization: `Bearer  ${token}`}});\n//      return next.handle(requestClone);\n//     }\n//     return next.handle(request);\n//   }\n// }","map":{"version":3,"names":[],"sources":["/home/amer/AngularProjects/schoolbook/src/app/interceptor/auth.interceptor.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\n// import {\n//   HttpRequest,\n//   HttpHandler,\n//   HttpEvent,\n//   HttpInterceptor\n// } from '@angular/common/http';\n// import { Observable } from 'rxjs';\n// import { AuthenticationService } from '../service/authentication.service';\n\n// @Injectable()\n// export class AuthInterceptor implements HttpInterceptor {\n\n//   constructor(private authenticationService: AuthenticationService) {}\n\n//   intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n//     if(request.url.includes(`/user/login`) || request.url.includes(`/user/register`) || request.url.includes(`/user/reset`)) {\n//       return next.handle(request);\n//     }\n//     this.authenticationService.loadToken();\n//     const token = this.authenticationService.getToken();\n//     if(token) {\n//      const requestClone = request.clone({setHeaders: {Authorization: `Bearer  ${token}`}});\n//      return next.handle(requestClone);\n//     }\n//     return next.handle(request);\n//   }\n// }\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}